@mixin make-col($size:false,$columns: $grid-columns){
  @if $size {
    flex: 0 0 auto;
    // flex-basis: ((100 /($columns))* $size) *1%;
     width: calc(((100 /($columns))* $size) *1%);
     flex-basis:calc( ((100 / $columns) * $size) * 1%);
     padding: 0 calc($gutter / 2);

  } @else {
    flex: 1 1 0;
    max-width:100%;
    padding: 0 calc($gutter / 2);

  }
}

@each $screen , $size in $grid-breakpoints{
  @for $i from 1 through $grid-columns {

    .col-#{$screen}-#{$i} {
      @media only screen and (min-width: calc(($size)* 1px)) {
        @include make-col($i,$grid-columns);
        padding: 0 calc($gutter / 2);
      }
    }

    .col-#{$screen} {
      @media only screen and (min-width: calc(($size)* 1px)) {
        @include make-col();
        padding: 0 calc($gutter / 2);
      }
    }
  
  
    .col-#{$screen}-offset-#{$i} {
        margin-left: calc((100 / ($grid-columns / $i) ) * 1%);
      }
    }
  }

@for $i from 1 through $grid-columns {
  .col-#{$i} {
    @include make-col($i,$grid-columns);
  }
}

.col{
  @include make-col();
}

.container{
  max-width: 100% ;
  margin: 0 auto;
  
}
 .container-fluid {
  padding: .75rem 0;
}

.row {
  display: flex;
  flex-wrap: wrap;
  width: 100%;
  margin-top: calc(-1 * $gutter-y);
  margin-right: calc(-0.5 * $gutter-x);
  // margin-left: calc(-0.5 * $gutter-x);
  // padding-right: calc($gutter-x * 0.5);
  padding-left: calc($gutter-x * 0.5);


  & + * {
    margin-bottom: rem(16);
    flex-shrink: 0;
    width: 100%;
    max-width: 100%;
    margin-top:$gutter-y;

  }
}
